buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
    }
}


// Expected structure:
//
//└── src
//    ├── doc
//    │   ├── asciidoc  == static adoc files eg index.adoc
//    │   └── resources
//    │       └── org
//    │           └── springframework
//    │               └── restdocs
//    │                   └── templates  == spring rest docs template overrides
//    └── test
//        └── java
//            └── apidocs  == spring rest docs test cases.

ext {
    // pattern for including/excluding api doc tests under src/test/java
    testSrcPattern = 'apidocs/**'

    // root for all adoc sources to add to path
    sourceDocsDir = 'src/doc'

    // location for generated docs inside jar
    jarDocsDir = 'static/docs'

    // working directory for doc fragments produced by tests
    snippetsDir = file('build/generated-snippets')
}

repositories {
    maven { url 'https://repo.spring.io/libs-milestone' }
}

apply plugin: org.asciidoctor.gradle.AsciidoctorPlugin

dependencies {
    testCompile libraries.springrestdocs
}

sourceSets {
    doc {
        resources.srcDir file("$sourceDocsDir/resources")
    }
}

test {
    exclude "$testSrcPattern"
}

task apiDocTest(type: Test) {
    description 'Runs the API documentation tests (generates doc snippets to build/generated-snippets but does not process into HTML)'
    group 'documentation'
    include "$testSrcPattern"
    classpath = sourceSets.test.runtimeClasspath + files("$sourceDocsDir/resources")
    reports.html.destination = file("$buildDir/reports/apidoctests")
    reports.junitXml.destination = file("$buildDir/test-results/apidoctests")
}

task generateApiDocs(dependsOn: ['apiDocTest', 'asciidoctor']) {
    description 'Generates the API documentation - look in build/asciidoc for the output'
    group 'documentation'
}

asciidoctor {
    description 'You should use the generateApiDocs task instead'
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir 'build/asciidoc'
    sourceDir "$sourceDocsDir/asciidoc"
    backends 'pdf', 'html5'
    mustRunAfter 'apiDocTest'
}

task buildWithApiDocs(type: Jar, dependsOn: ['generateApiDocs', 'build']) {
    description 'Same as build but also generates API docs and adds them to the jar'
    group 'build'

    destinationDir = new File("build/libs/")

    project.afterEvaluate { // Wait for regular jar task to be evaluated first

        baseName = jar.baseName
        appendix = "api+docs"
        version = jar.version

        manifest { attributes('Main-Class': "$mainClassName") }

        from zipTree(jar.archivePath)
        from("${asciidoctor.outputDir}/html5/index.html") { into "$jarDocsDir" }
        from("${asciidoctor.outputDir}/pdf/index.pdf") { into "$jarDocsDir" }
    }
}
