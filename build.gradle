buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://github.com/UKHomeOffice/pttg-gradle-repo/raw/master/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.serenity-bdd:serenity-gradle-plugin:1.1.31'

        classpath 'pttg-gradle-common:pttgCommonGradle:1.3.RELEASE'
        classpath 'pttg-gradle-common:pttgApiDocsGradle:1.2.RELEASE'
        classpath 'pttg-gradle-common:pttgSpringBootGradle:1.1.RELEASE'

        // This shouldn't be needed. It should pull transitively from the plugin. Don't know why it isn't working.
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"
    }
}

apply plugin: 'pttgCommonGradle'
apply plugin: 'pttgSpringBootGradle'
apply plugin: 'pttgApiDocsGradle'
apply plugin: 'net.serenity-bdd.aggregator'

group 'pttg-ip-api'
version = '0.1.0'

mainClassName = "uk.gov.digital.ho.proving.income.ServiceRunner"

dependencies {
    compile libraries.groovy
    compile libraries.logging
    compile libraries.jackson
    compile libraries.jersey
    compile libraries.json
    compile libraries.mongo
    compile libraries.springboot
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'net.logstash.logback:logstash-logback-encoder:4.7'


    testCompile libraries.cucumber
    testCompile libraries.groovy
    testCompile libraries.jackson
    testCompile libraries.jersey
    testCompile libraries.json
    testCompile libraries.restassured
    testCompile libraries.spock
    testCompile libraries.springTest
    testCompile libraries.testUtils
}

springboot {
    port = 8080
}

test {
    exclude 'acceptance/**'
}

task accept(type: Test) {
    include 'acceptance/**'
    finalizedBy aggregate
    outputs.upToDateWhen { false }
}

task acceptanceTest(type: Test) {
    description 'Runs the acceptance tests.'
    dependsOn 'accept'
    group 'verification'
    include 'acceptance/**'
    outputs.upToDateWhen { false }
}

if (System.getenv('VERSION')) {
    version = System.getenv('VERSION')
}
if (System.getenv('BUILD_NUMBER')) {
    version = version + '-' + System.getenv('BUILD_NUMBER')
}
if (System.getenv('GIT_COMMIT')) {
    version = version + '.' + System.getenv('GIT_COMMIT')
}

tasks.withType(Jar) {
    manifest {
        attributes(
            'Implementation-Title': "${jar.baseName}",
            'Implementation-Version': version
        )
    }
}

apidocs {
    jarDocsDir = 'static'
    jarAppendix = 'docs'
}

task buildSpringBootWithApiDocs(type: BootRepackage, dependsOn: buildWithApiDocs) {
    group 'build'
    description 'Builds the jar as a Spring Boot executable jar containing the api docs'
}

tasks.withType(JavaCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(GroovyCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        force = true
        additionalParameters = ["-Xmax-classfile-name", "127"]
        forkOptions.setMemoryMaximumSize("256m")
    }
}

test {
    exclude 'acceptance/**'
    maxHeapSize = "256m"
}
