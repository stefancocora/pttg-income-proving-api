apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

ext{
    cucumberVersion = '1.2.4'
    groovyVersion = '2.4.3'
    jacksonVersion = '2.7.4'
    logbackVersion = '1.1.3'
    mongoVersion = '3.0.4'
    restAssuredVersion = '2.9.0'
    serenityCucumberVersion = '1.1.6'
    serenityVersion = '1.1.31'
    spockVersion = '1.0-groovy-2.4'
    springBootVersion = '1.3.3.RELEASE'
    springRestDocsVersion = '1.1.0.RC1'
    springVersion = '4.2.5.RELEASE'
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile 'org.json:json:20160212'

    testCompile 'cglib:cglib-nodep:3.2.1'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile 'org.json:json:20160212'
    testCompile 'org.objenesis:objenesis:2.2'
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "info.cukes:cucumber-java:$cucumberVersion"
    testCompile "info.cukes:cucumber-junit:$cucumberVersion"
    testCompile 'info.cukes:gherkin:2.12.2'
    testCompile 'junit:junit:4.12'
    testCompile "net.serenity-bdd:serenity-core:$serenityVersion"
    testCompile "net.serenity-bdd:serenity-cucumber:$serenityCucumberVersion"
    testCompile "net.serenity-bdd:serenity-junit:$serenityVersion"
    testCompile 'org.mockito:mockito-all:1.10.19:'
}

ext.libraries = [

    logging: [
        "ch.qos.logback:logback-classic:$logbackVersion",
        "ch.qos.logback:logback-core:$logbackVersion",
        'org.slf4j:slf4j-parent:1.7.14'
    ],

    jackson: [
        "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
        "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    ],

    mongo: [
        "org.mongodb:bson:$mongoVersion",
        "org.mongodb:mongodb-driver:$mongoVersion"
    ],

    springboot: [
        "org.springframework.boot:spring-boot:$springBootVersion",
        "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    ],

    springbootDev: [
        "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    ],

    springrestdocs: [
        "org.springframework.restdocs:spring-restdocs-core:$springRestDocsVersion",
        "org.springframework.restdocs:spring-restdocs-restassured:$springRestDocsVersion"
    ],

    restassured: [
        "com.jayway.restassured:json-schema-validator:$restAssuredVersion",
        "com.jayway.restassured:rest-assured:$restAssuredVersion"
    ],

    spock: [
        "org.spockframework:spock-core:$spockVersion",
        "org.spockframework:spock-spring:$spockVersion"
    ]
]

// Separate all test reports according to task name
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Apply configuration only when the given task is in the task execution graph
ext.onlyFor = { task, config ->
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(task)) {
            project.configure(project, config)
        }
    }
}




